@page "/products"
@inject IProductService Api

<h3>Product List</h3>

<div>
    <label for="searchInputText">Search Text:</label>

    <DebounceSearchInput ValueChanged=@OnSearch />

    <button class="btn btn-primary">Search</button>
</div>

<CascadingValue Value=@Level Name="lvl">

    <Loader IsLoading=@isLoading>

        <Table Items="@products">
            <HeaderTemplate>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Image</th>
            </HeaderTemplate>

            <RowTemplate Context="product">
                <td>@product.Id </td>
                <td>@product.Name</td>
                <td>@product.Description</td>
                <td>@product.Price</td>
                <td><a class="btn btn-primary" href="/products/view/@product.Id">View</a></td>
            </RowTemplate>
        </Table>


    </Loader>

</CascadingValue>

@code {
    private string Level = "b";

    private List<Product>? products;

    private bool isLoading => products is null;

    protected override async Task OnInitializedAsync()
    {
        products = await Api.GetAll();
    }

    private async Task OnSearch(string value)
    {
        // Wywołaj API
        Console.WriteLine($"Searching products... {value}");

        await Task.Delay(TimeSpan.FromSeconds(3));

        Console.WriteLine($"Found.");

    }

}
