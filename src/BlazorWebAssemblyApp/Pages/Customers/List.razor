@page "/customers"

<h3>Customer List</h3>

<div>
    <label for="searchInputText">Search Text:</label>
    <input type="text" id="searchInputText" @ref=@searchInputTextRef @bind=@searchText @bind:event="oninput" @bind:after=@SearchHandler />
    <button @onclick=@SearchHandler class="btn btn-primary">Search</button>

</div>

<Loader IsLoading=@isLoading>
    <Table Items="@customers">
        <HeaderTemplate>
            <th>Id</th>
            <th>Name</th>
            <th>Email</th>
            <th>Actions</th>
        </HeaderTemplate>

        <RowTemplate Context="customer">
            <td>@customer.Id </td>
            <td>@customer.Name</td>
            <td>@customer.Email</td>
            <td><a class="btn btn-primary" href="/customers/view/@customer.Id">View</a></td>
        </RowTemplate>
    </Table>

</Loader>

@code {
    private string searchText = "a";

    private ElementReference searchInputTextRef;

    private CancellationTokenSource cts;

    private async Task SearchHandler()
    {
        cts?.Cancel();

        cts = new CancellationTokenSource();

        var token = cts.Token;
        
        try
        {
            await Task.Delay(500, token);

            await SearchAsync(token);
        }

        catch (TaskCanceledException) { }
    }



    private async Task SearchAsync(CancellationToken token)
    {
        if (!token.IsCancellationRequested)
        {
            Console.WriteLine($"Searching... {searchText}");

            await Task.Delay(TimeSpan.FromSeconds(3), token);

            Console.WriteLine($"Found {searchText}");
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await searchInputTextRef.FocusAsync();
    }



}