@page "/customers/edit/{id:int}"
@inject ICustomerService Api
@using Blazored.FluentValidation
@implements IDisposable

<h3>Edit</h3>

<Loader IsLoading=@isLoading>

    <EditForm Model="@customer" OnValidSubmit="@HandleSave">

        @* <DataAnnotationsValidator /> *@

        @* dotnet add package Blazored.FluentValidation *@

        <FluentValidationValidator />

        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name: </label>
            <InputText id="name" class="form-control" @bind-Value=customer.Name />
            <ValidationMessage For="() => customer.Name" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email: </label>
            <InputText id="email" class="form-control" @bind-Value=customer.Email />
            <ValidationMessage For="() => customer.Email" />
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password: </label>
            <InputText id="password" class="form-control"  @bind-Value=customer.HashedPassword />
            <ValidationMessage For="() => customer.HashedPassword" />
        </div>

        <div class="mb-3">
            <label for="confirmPassword" class="form-label">Confirm Password: </label>
            <InputText id="confirmPassword" class="form-control" @bind-Value=customer.ConfirmedPassword />
            <ValidationMessage For="() => customer.ConfirmedPassword" />
        </div>

        
        <button type="submit" class="btn btn-primary" disabled=@isSaving>Save</button>
        

    </EditForm>

</Loader>

@code {

    [Parameter]
    public int Id { get; set; }

    private Customer? customer;

    private bool isLoading => customer is null;

    private bool isSaving = false;

    protected override async Task OnParametersSetAsync()
    {
        customer = await Api.Get(Id);
    }

    public void Dispose()
    {
        Console.WriteLine("Disposed!");
    }

    private async Task HandleSave()
    {
        isSaving = true;

        Console.WriteLine($"Handled Save {customer.Name}");

        // TODO: Dodaj
        // await Api.Update(customer);

        await Task.Delay(TimeSpan.FromSeconds(5));

        isSaving = false;

        Console.WriteLine("Saved.");
    }
}
